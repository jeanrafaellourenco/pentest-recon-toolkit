#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# pip3 install requests, urllib3
# https://www.w3schools.com/python/python_regex.asp
import re
import sys
import urllib3
import requests
import urllib.parse

if len(sys.argv) < 2:
    print('Url nÃ£o informada!\nUse: ./topregex.py https://example.com')
    exit(1)

url = sys.argv[1]
url = urllib.parse.unquote(url)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) # desativando erros de certificado ssl
header = {"User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0"}

# Regex dict: https://github.com/bfleal/burp-regexer/blob/main/Regexer.py

REGEX_DICT = {
    "AWS S3 URL": {
        "description": "",
        "regex": "https?://[a-zA-Z0-9-.]*amazonaws.com[a-zA-Z0-9?=&\\[\\]:%_./-]*"
    },
    "URI Schemes": {
        "description": "",
        "regex": "[a-zA-Z0-9-]*://[a-zA-Z0-9?=&\\[\\]:%_./-]+"
    },
    "AWS Access Key": {
        "description": "",
        "regex": "AKIA[0-9A-Z]{16}"
    },
    "JWT": {
        "description": "",
        "regex": "(eyJ[\w-]*\.[\w-]*\.[\w-]*)"
    },
    "Token": {
        "description": "",
        "regex": "token=[a-zA-Z0-9.+/]+"
    },
    "Google API": {
        "description": "",
        "regex": "AIza[0-9A-Za-z-_]{35}"
    },
    "MD4/MD5": {
        "description": "",
        "regex": "([a-f0-9]{32})"
    },
    "HTML Comments": {
        "description": "",
        "regex": "(\\<![\\s]*--[\\-!@#$%^&*:;.,\"'(){}\\w\\s\\/\\[\\]]*--[\\s]*\\>)"
    },
    "Block Comments": {
        "description": "",
        "regex": "/\*[\s\S]*?\*/"
    },
    "One line Comments": {
        "description": "",
        "regex": "/\*.*?\*/"
    },
    "One line Comments 2": {
        "description": "",
        "regex": "//\s[\s\S]*?\n\s"
    },
    "Private Key": {
        "description": "",
        "regex": "Private Key: -----BEGIN PRIVATE KEY-----|-----END PRIVATE KEY-----"
    },
    "Paths": {
        "description": "",
        "regex": "['\"]/[a-zA-Z0-9/_-]+['\"]*"
    },
    "Email Adressess": {
        "description": "",
        "regex": "([a-zA-Z0-9_.+-]+@[a-zA-Z0-9]+[a-zA-Z0-9-]*\\.[a-zA-Z0-9-.]*[a-zA-Z0-9]{2,})"
    },
    "IP Adressess": {
        "description": "",
        "regex": "([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})"
    },
    "RSA Key": {
        "description": "",
        "regex": "-----BEGIN RSA PRIVATE KEY-----|-----END RSA PRIVATE KEY-----"
    }
}

TOP_DICT = {
    "Top URI Parameters": {
        "description": "",
        "regex": "[\?|&][a-zA-Z0-9-.]*="
    }
}

# Percorre o REGEX_DICT

response = requests.get(url, headers=header, verify=False)
for x in REGEX_DICT:
    print(f"===============================================")
    print(f'\t\t{x}')
    print(f"===============================================")
    resultado = re.findall(REGEX_DICT[x]['regex'], response.text)
    for linha in resultado:
        print(f'{linha}')

# Faz o top no conteudo de cada URL encontrada

print(f"===============================================")
print(f'\t\tTop URI Parameters')
print(f"===============================================")
resultado = re.findall(REGEX_DICT['URI Schemes']['regex'], response.text)
for url in resultado:
    novaurl = urllib.parse.unquote(url)
    novoresultado = re.findall(TOP_DICT['Top URI Parameters']['regex'], novaurl)
    for item in novoresultado:
        print(f'URL: {novaurl}')
        print(f'PARAMETRO: {item}')
        print(f"===============================================")